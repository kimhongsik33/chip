## SpringBasic_Part2
## Chapter2-1. 스프링 MVC 흐름과 구성 컴포넌트

 #Spring MVC흐름
 
  1) client ------> Dispatcher Servlet // 요청을 수신
  
  2) Dispatcher Servlet -------> Handler Mapping // 컨트롤러 문의
  
  3) Dispatcher Servlet -------> Handler Adapter // 요청을 controller에게 전송
  
  4) Controller -------> Handler Adapter // 요청결과와 뷰에 대한 정보를 리턴한다.
  
  5) Handler Adapter --------> Dispatcher Servlet // Model And View 객체를 만들어서 전달
  
  6) Dispatcher Servlet --------> View Resolver // 응답할 View를 요청한다.
  
  7) Dispatcher Servlet --------> View // View를 이용해서 응답을 한다.  
  
  # Handler == Controller
  # Handler Mapping -----> Handler Adapter (일대일 매핑) 
  
  
## Chapter2-2. 스프링 MVC 프로젝트의 구조

## Chapter2-3. 컨트롤러 작성하기 및 한글 처리
 servlet-context.xml에서 <annotation-driven />가 없으면 어노테이션을 쓸 수가 없다.

 
## Chapter2-4. ModelAndView 객체를 이용한 컨트롤러 작성

 # 컨트롤러 제작 순서
 최초의 클라이언트 요청이 들어오면 컨트롤러로 진입을 한다.
 컨트롤러는 요청에 대한 작업처리를 한 후에 뷰에 데이터를 전달한다.
 
 1) @Controller를 이용한 클래스 생성
 2) @RequestMapping을 이용한 요청경로를 매핑 한다.
 3) 요청처리 메소드를 구현한다.
 4) 뷰 이름을 리턴한다.
 
 # ModelAndView객체를 이용한 데이터 전달
 1) ModelAndView객체를 생성 
 2) Model객체에 데이터를 추가시킨다.(addObject()이용)
 3) 뷰이름을 설정한다.(setViewName()이용)
 
## Chapter2-5. HttpServletRequest를 이용한 데이터 전송

## Chapter2-6. Command 객체 및 @RequestParam를 이용한 데이터 전송

## Chapter2-7. @PathVariable 사용법 및 URL 한글 encoding 처리하기

## Chapter2-8. @PathVariable 활용 방법

## Chapter2-9. 스프링에서 GET 방식과 POST 방식 적용

## Chapter2-10. @MethodAttribute 사용 및 새로운 패키지에 새로운 컨트롤러 추가하기

## Chapter2-11. @MethodAttribute를 이용하여 뷰에 모델 전달하기

## Chapter2-12. @MethodAttribute를 이용하여 커멘드 객체 초기화 하기

<<<<<<< HEAD
## Chapter2-13. redirect: 사용하기 
=======
 
>>>>>>> refs/remotes/origin/master

