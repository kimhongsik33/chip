## SpringBasic_Part2
## Chapter2-1. 스프링 MVC 흐름과 구성 컴포넌트

 #Spring MVC흐름
 
  1) client ------> Dispatcher Servlet // 요청을 수신
  
  2) Dispatcher Servlet -------> Handler Mapping // 컨트롤러 문의
  
  3) Dispatcher Servlet -------> Handler Adapter // 요청을 controller에게 전송
  
  4) Controller -------> Handler Adapter // 요청결과와 뷰에 대한 정보를 리턴한다.
  
  5) Handler Adapter --------> Dispatcher Servlet // Model And View 객체를 만들어서 전달
  
  6) Dispatcher Servlet --------> View Resolver // 응답할 View를 요청한다.
  
  7) Dispatcher Servlet --------> View // View를 이용해서 응답을 한다.  
  
  # Handler == Controller
  # Handler Mapping -----> Handler Adapter (일대일 매핑) 
  
  
## Chapter2-2. 스프링 MVC 프로젝트의 구조

## Chapter2-3. 컨트롤러 작성하기 및 한글 처리
 servlet-context.xml에서 <annotation-driven />가 없으면 어노테이션을 쓸 수가 없다.

 
## Chapter2-4. ModelAndView 객체를 이용한 컨트롤러 작성

 # 컨트롤러 제작 순서
 최초의 클라이언트 요청이 들어오면 컨트롤러로 진입을 한다.
 컨트롤러는 요청에 대한 작업처리를 한 후에 뷰에 데이터를 전달한다.
 
 1) @Controller를 이용한 클래스 생성
 2) @RequestMapping을 이용한 요청경로를 매핑 한다.
 3) 요청처리 메소드를 구현한다.
 4) 뷰 이름을 리턴한다.
 
 # ModelAndView객체를 이용한 데이터 전달
 1) ModelAndView객체를 생성 
 2) Model객체에 데이터를 추가시킨다.(addObject()이용)
 3) 뷰이름을 설정한다.(setViewName()이용)
 
## Chapter2-5. HttpServletRequest를 이용한 데이터 전송

## Chapter2-6. Command 객체 및 @RequestParam를 이용한 데이터 전송

## Chapter2-7. @PathVariable 사용법 및 URL 한글 encoding 처리하기

## Chapter2-8. @PathVariable 활용 방법

## Chapter2-9. 스프링에서 GET 방식과 POST 방식 적용

## Chapter2-10. @MethodAttribute 사용 및 새로운 패키지에 새로운 컨트롤러 추가하기

## Chapter2-11. @MethodAttribute를 이용하여 뷰에 모델 전달하기

## Chapter2-12. @MethodAttribute를 이용하여 커멘드 객체 초기화 하기

<<<<<<< HEAD
## Chapter2-13. redirect: 사용하기 
<<<<<<< HEAD
=======

## Chapter2-14. 폼유효성 검사 처리과정 이해

 [유효성검사]
 Validator : org.springframework.validation.Validator인터페이스
 
  # 구현메소드
   - boolean supports(Class<?> arg0) 
     : Validator가 해당 클래스에 대한 값 검증을 지원하는지 여부를 리턴.
   - void validate(Object target, Errors errors)
     : target객체에 대한 검증을 실행하는 메소드. 
            만약 검증결과 문제가 있을 경우에는 errors 객체에 에러 정보를 저장한다.
   
   ##커맨드 객체에 검증 코드 추가 방법
    - @RequestMapping 어노테이션 메서드에서 커맨드객체 다음 파라미터로 BindingResult타입 이나 Errors타입의 파라미터를 추가한다.
    
    - @RequestMapping 어노테이션 메서드에서 Validator객체를 생성 후, validate()메서드를 호출한다.
       이때 커맨드객체와 BindingResult 또는 Errors 타입의 파라미터를 전달한다.
       
    - Errors.hasErrors()메서드를 이용하면 에러가 있는지 여부를 확인 할 수 있다.
      에러가 있는 경우 true, 없는경우 false를 리턴
      
 
 ## Chapter2-15. Validator 를 이용한 유효성 체크
 
 ## Chapter2-16. ValidationUtils클래스, @Valid, @InitBinder를 이용한 유효성 검사
   
   # ValidateUtils Class
    : validate()메소드를 좀 더 편리하게 사용할 수 있도록 한 클래스
    
    //validate()메소드내에서 처리하는 코드
    String memberName = member.getName();
		if(memberName == null || memberName.trim().isEmpty()){
			System.out.println("Please, input the Name information");
			errors.rejectValue("name", "error is occured when input");
		}
		
    --------> ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "error is occured when input");
    
   # @Valid, @InitBinder
    : validate()를 직접 호출하지 않고 스프링 프레임워크에서 호출하는 방법.
    
    1. pom.xml에서 라이브러리를 추가 시켜야 한다.(의존 추가)
	    <dependency>
	    	<groupId>org.hibernate</groupId>               //com.test
	    	<artifactId>hibernate-validator</artifactId>   //mvc
	    	<version>4.2.0.Final</version>
	    </dependency>  
    
    2. @Valid 를 아래와 같이 추가한다.
    	@RequestMapping("/joinOk")
		public String joinOk(@ModelAttribute("model") Member member, BindingResult result){}
		-------->
		@RequestMapping("/joinOk")
		public String joinOk(@ModelAttribute("model") @Valid Member member, BindingResult result){
		
    3. @InitBind 를 아래와 같이 추가한다.
        MemberValidator memberValidator = new MemberValidator();
		memberValidator.validate(member, result);
		-------->
		@InitBind
		protected void initBinder(WebDataBinder binder){
			binder.setValidator(new MemberValidator());
		}
		
## Chapter2-17. Errors , BindingResult 인터페이스
 
  #Errors인터페이스
   : org.springFramework.validation.Errors
   : 유효성 검증 결과를 저장할 때 사용
   <Errors인터페이스 메소드 (반환타입 void)>
    .reject(String errorCode) 
     ->전 객체에 대한 글로벌 에러코드를 추가
    .reject(String errorCode, String defaultMessage)
     ->전 객체에 대한 글로벌 에러코드를 추가하고,
            에러코드에 대한 메세지가 존재하지 않을 경우 디폴트 메세지를 사용한다.
    .reject(String errorCode, Object[] errorArgs, String defaultMessage)
     ->전 객체에 대한 글로벌 에러코드를 추가하고,
            메세지 인자로 errorArgs를 전달하고,
            에러코드에 대한 메세지가 존재하지 않을 경우 디폴트 메세지를 사용한다.
            
    .rejectValue(String field, String errorCode)
     ->필드에 대한 에러코드를 추가
    .rejectValue(String field, String errorCode, String defaultMessage)
     ->필드에 대한 에러코드를 추가
            에러코드에 대한 메세지가 존재하지 않을 경우 디폴트 메세지를 사용한다.
    .rejectValue(String field, String errorCode, Object[] errorArgs, String defaultMessage)
     ->필드에 대한 에러코드를 추가
            메세지 인자로 errorArgs를 전달하고,
            에러코드에 대한 메세지가 존재하지 않을 경우 디폴트 메세지를 사용한다.
    
    --=======================================        
    --Error인터페이스의 에러발생여부 확인하기 위한 메서드
    --=======================================
    .boolean hasErrors()
     --->에러가 존재하는 경우 true리턴 
    .int getErrorCount()
     --->에러개수를 리턴
    .boolean hasGlobalErrors
     --->reject()메소드를 이용해서 추가된 글로벌 에러가 존재할 경우 true리턴
    .int getGlobalErrorCount() 
     --->reject()메소드를 이용해서 추가된 글로벌 에러개수를 리턴
    .boolean hasFieldErrors()
     --->rejectValue() 메소드를 이용해서 추가된 에러가 존재할 경우 true리턴.
    .int getFieldErrorCount()  
     --->rejectValue() 메소드를 이용해서 추가된 에러개수를 리턴 
    .boolean hasFieldErrors(String field)
     --->rejectValue() 메소드를 이용해서 추가된 특정필드의 에러가 존재할 경우 true리턴.
    .int getFieldErrorCount(String field)  
     --->rejectValue() 메소드를 이용해서 추가된 특정필드의 에러개수를 리턴 
     
  #BindingResult
   : org.springFramework.validation.BindingResult 
   : Errors의 하위 인터페이스로 서 폼 값을 커맨드 객체에 바인딩한 결과를 저장하고 에러코드로 부터 에러 메세지를 가져온다.		
=======
=======


 ##Chapter2-18. @Component의 이해
 
  #@Component
  
  @Controller는 @Component를 상속받았다. 
  
  servlet-context.xml에서
  <context:component-scan base-package="" /> 태그를 사용해서 스프링이 클래스(컴포넌트, 컨트롤러)를 검색할 패키지를 지정
  <context:component-scan base-package="" /> 태그는 base-package에서 지정한 패키지에서 @Component가 적용된 클래스를
                                                                               검색해서 빈으로 자동 등록한다.
    따라서 XML설정파일이 다양한 빈 정보를 추가하지 않아도 된다.
    *설정파일에서는 <context:annotaion-config>태그를 사용한다.
    
  @Component("service01")
  public class AbstractSvcImpl implements AbstractSvcImpl{
  	private String name = "01";
  	
  	@Override
  	public String getClassName(){
  		return "AbstractSvcImpl - " + name; 
  	}
  }
  
  설정파일에서 <bean>태그로 작성한다면
  <bean id="service01" class="com.spring.annotationEx.AbstractSvcImpl" />와 같은 방법이다.
  
## Chapter2-19. @Resource, AbstractController 인터페이스

 @Resource
  자바6 및 JEE5에 추가되었다.
  어플리케이션에서 필요로 하는 자원을 자동으로 연결할 때 사용한다. 스프링2.5부터 지원하는 어노테이션.
  의존하는 빈 객체를 전달할 때 사용.
  설정파일에서는 
  <context:annotation-config>태그를 사용해야 한다.
  또는
  <bean Class="org.springframework.beans.factory.annotation.CommonAnnotationBeanPostProcessor" />
  클래스를 빈으로 등록시켜 사용하는 방법이 있다.

## Chapter2-20. @AutoWired, @Qualifier

 [@AutoWired]
 - 의존관계가 자동으로 설정(type기반)
 - 생성자, 필드, 메소드에 적용 가능
 - set계열의 메소드가 아닌 메소드에도 적용이 가능


## Chapter2-21. 주요 ViewResolver 구현 클래스 및 다수의 ViewResolver 설정

  [ViewResolver 구현 클래스와 다수의 ViewResolver 설정]
  
  #ViewResolver 구현 클래스
  
   ●InternalResourceViewResolver
     : 뷰이름으로 부터 JSP나 Tiles연동을 위한 View객체를 리턴
     : JSP나 HTML파일과 같이 웹 어플리케이션의 내부자원을 이용하여 뷰를 생성하는 AbstractUrlBasedView타입의 뷰객체를 리턴
    
      .기본적으로 사용하는 View 클래스
      .prefix, suffix 프로퍼티를 사용
      <bean id="internalResource" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      	  <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
    	  <property name="prefix" value="/WEB-INF/views/" />
		  <property name="suffix" value=".jsp" />
      </bean> 
    
   ●VelocityViewResolver
     : 뷰이름으로 부터 Velocity 연동을 위한 View객체를 리턴
    
   ●VelocityLayoutResolver
     : VelocityViewResolver와 동일한 기능을 제고하며, 추가로 Velocity의 레이아웃 기능을 제공한다.
    
   ●BeanNameViewResolver
     : 뷰이름과 동일한 이름을 갖는 빈객체를 View객체로 사용
     
     .뷰의 이름과 동일한 이름을 갖는 빈을 뷰 객체로 사용
     .주로 커스텀 View클래스를 뷰로 사용해야 하는 경우에 사용
     
     <bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
     	<bean id="download" class="com.spring.download.PdfDown" />
     </bean>
     
     ---> 특정 컨트롤러에서 뷰의 이름을 download로 지정했을 경우, 위의com.spring.download.PdfDown 클래스가 처리를 한다. 
    
    
   ●ResourceBundleViewResolver
     : 뷰이름과 View객체간의 매핑정보를 저장하기 위해 자원 파일을 사용
    
   ●XmlViewResolver
     : 뷰이름과 View객체간의 매핑정보를 저장하기 위해 Xml파일을 사용
     
     .뷰 이름과 동일한 이름을 갖는 빈을 뷰 객체로 사용
     .별도의 xml설정 파일로 부터 빈 객체를 검색
     
     <bean id="viewResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
     	<property name="location" value="/WEB-INF/views/aaa.xml" />
     </bean>
     
  
  
  #다수의 ViewResolver 설정
   . 하나의 DispatcherServlet은 한개 이상의 ViewResolver를 설정할 수 있다.
   . order 프로퍼티를 이용하여 뷰 이름을 검사할 ViewResolver의 순서를 결정.
   . order 프로퍼티의 값이 작을 수록 우선순위가 높다.
         우선순위가 높은 ViewResolver가 null을 리턴하면, 다음우선순위의 ViewResolver에 뷰를 요청
     
                  ※   InternalResourceViewResolver는 마지막 우선순위를 갖도록 지정한다.
             왜냐하면 null을 리턴하지 않기 때문에 우선순위가 마지막이 아닌경우에는 다음 순서의 ViewResolver가 사용되지 않는다.
       
       <bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="1" /> 
  	   <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="1">
  			<property name="order" value="2" />
  			<property name="prefix" value="aaa/" />
  			<property name="suffix" value=".jsp" />
       </bean>
  
  
  
 ##Chapter2-22. 스프링 form 태그 라이브러리 사용하기
 
  [폼 태그 라이브러리(커스텀 태그)]
  : 버전 2.0부터 스프링은 JSP와 스프링 웹 MVC를 사용하는 경우 폼 요소를 다룰 수 있도록 데이터 바인딩과 관련된 광범위한 태그 세트를 제공한다.
  : 폼태그 라이브러리는 sprimg-webmvc.jar에 있다.
  
  [form태그를 위한 커스텀 태그]
   HTML 'form'태그를 생성하고 바인딩을 위해서 내부 태그에 바인딩 경로(path)를 지정한다.
   -----------------
   <form:form>
   
   </form:form>
   -----------------
      위의 예처럼 method, action을 설정하지 않았을 경우
    method는 post로 설정, 
    action은 현재 요청 URL값이 설정된다.
    ---> ●생성된 HTML에는id속성이 주어지는데, 이때 id속성값은
                 입력 폼의 값을 저장하는 커맨드 객체의 이름이 할당된다.
          <form id="command" method="post" action="addMember">
         
	     ●커맨드객체의 이름이 기본값인 command가 아닐 경우
	      commandName속성에 커맨드 객체의 이름을 명시해야 한다.
	      <form:form commandName="join"></form:form>
	     
	     ●<form:form>태그내부에는 <input>태그나 <select>태그와 같이 입력폼을 출력하는데 필요한
	      HTML태그를 입력해서 사용할 수 있다.
	          이때, 입력한 값이 잘못되어 다시 값을 입력해야 하는 경우에는 이전에 입력한 값을 출력할 수 있다.
	      <form:form commandName="join">
	      	<input type="text" name="id" value="${join.id}" />
 	      </form:form>
   
 ##Chapter2-23. select태그를 위한 스프링 커스텀 태그 사용법
 
  [<input>태그를 위한 커스텀 태그]
  <form:input>    ----> text타입의 <input>
  <form:password> ----> password타입의 <input>
  <form:hidden>   ----> hidden타입의 <input>
  
  path속성 : 바인딩 될 command객체의 프로퍼티를 지정하는 속성
  <form:input path="userId">
  ---변환---><input id="userId" name="userId" type="text" value="" />
   
  [<select>태그를 위한 커스텀 태그]
  <form:select>  : <select>태그를 생성한다. <option>태그를 생성하는데 필요한 콜렉션을 전달 받을 수도 있다.
  <form:options> : 지정한 collection객체를 이용해서 <option>태그를 생성한다.
  <form:option>  : 하나의 option태그를 생성한다.
  
    이태그는 선택 옵션을 제공할 때 주로 사용하는 태그이므로 여러개의 선택사항들을 제공한다.
    선택정보는 컨트롤러에서 생성해서 뷰로 전달하는 경우가 일반적이다.
  @ModelAttribute 어노테이션을 이용해서 전달한다.
  
  @ModelAttribute("seasons")
  protected List<String> referData() throws Exception{
  	List<String> seasons = new ArrayList<String>();
  	seasons.add("spring");
  	seasons.add("summer");
  	seasons.add("fall");
  	seasons.add("winter");
  } 
  
  <form:form commandName="trip" >
  	<form:select path="seasons" item="${seasons}"/>  <!-- Path에는 ModelAttribute의 객체이름을 지정한다. -->
  </form:form>
  -------변환------->
  <select id="seasons" name="seasons">
  	<option value="spring">spring</option>
  	<option value="summer">summer</option>
  	<option value="fall">fall</option>
  	<option value="winter">winter</option>
  </select>
  
  <!-- 위의 결과와 같은 html을 생성하는 커스텀태그 사용방법으로는 아래와 같이 사용할 수 있다. -->
  <form:select path="seasons">
   <option value="">------select the item------</option>
   <form:options items="${seansons}" />
  </form:select>


Chapter2-24. checkbox 타입 input 태그를 위한 커스텀 태그 사용법
  
  
  <form:select path="join">
  	<form:option value="Spring!" />
  	<form:option value="Summer">Summer!</form:option>
  	<form:option value="Winter" label="Winter!"/>
  </form:select>
  
  ------------> 생성되는 HTML은
  
  <select id="seasons" name="seasons">
  	<option value="Spring!">Spring!</option>
  	<option value="Summer">Summer!</option>
  	<option value="Winter">Winter!</option>
  </select>
  
  ----콜랙션이 있는 객체가 String이 아닌 경우-------
  public class Code{
  	private String code;
  	private String label;
  	
  	//getter, setter
  	.....
  }
  
  <form:select path="jobCode">
   <option value="">------select the item------</option>
   <form:options items="${jobCode}" itemLabel="label" itemValue="code" />
  </form:select>
  
  **if seasons object's property value is 'Spring'..
  <select id="seasons" name="seasons">
  	<option value="Spring" selected="selected">Spring</option>
  	<option value="Summer">Summer</option>
  	<option value="Fall">Fall</option>
  	<option value="Winter">Winter</option>
  </select>
  
#checkBox 타입의 <input> 태그를 위한 커스텀 태그:
    <form:checkboxes>, <form:checkbox>
    
    . 커맨드 객체(MemberInfo)가 아래와 같을 때
    public class MemberInfo{    
        ....         
    	private String[] favorites;    	
    	
    	public String[] getFavorites(){
    		return favorites;    	
    	}
    	
    	public void setFavorites(String[] favorites){
    		this.favorites = favorites;
    	}
    	
    	...    
    }
    
    # HTML 입력 폼에서 여러 개의 값을 선택하는 코드
    <input type="checkbox" name="favorites" value="독서">독서</input>
    <input type="checkbox" name="favorites" value="여행">여행</input>
    
    
    <form:checkboxes> : 커맨드 객체의 특정 프로퍼티와 관련된 checkbox 타입의 input 태그 목록을 생성한다.    
    <form:checkbox> : 커맨드 객체의 특정 프로퍼티와 관련된 checkbox 타입의 한개의 input 태그를 생성한다.
    
    
    사용예>
    <form:label path="favorites">선호하는 것</form:label>
    <form:checkboxes items="${favor1}" path=""/>
    
    --->
    <input id = "favorites1" type="checkbox" name="favorites" value="독서"><label>독서</label>
    <input id = "favorites2" type="checkbox" name="favorites" value="여행"><label>여행</label>
    
    
Chapter2-25. radio 타입input 태그 및 textarea 태그를 위한 커스텀 태그 사용법
    
   public class MemberInfo{
   	....
	   	private boolean contractAgreement;
	   	
	   	public boolean isContractAgreement(){
	   		return contractAgreement;
	   	}
	   	
	   	public void setContractAgreement(boolen contractAgreement){
	   		this.contractAgreement = contractAgreement;
	   	
	   	}
   } 
   
   <form:checkbox path="contractAgreement" label="위의 약관에 동의합니다."/>
   
   ----->
   
   <input id="contractAgreement" name="contractAgreement" type="checkbox"
    value="true"/><label for="contractAgreement1">위의 약관에 동의합니다.</label>
  
   <input type="hidden" name="_contractAgreement" value="on"/>   
          
   # radio 타입 <input> 태그를 위한 커스텀 태그:
   
   <form: radiobuttons> : 커맨드 객체의 특정 프로퍼티와 관련된 radio 타입의 <input> 태그 목록을 생성한다.
   
   <form: radiobutton>  : 커맨드 객체의 특정 프로퍼티와 관련된 radio 타입의 한개의 <input> 태그를 생성한다.  
   
   사용예>
   <form:radiobuttons> 커스텀 태그는 items 속성을 이용하여 값으로 사용할 콜렉션을 전달받는다.
   path 속성을 이용하여 값을 바인딩할  커맨드 객체의 프로퍼티를 지정한다.
   
   <form:label path="program">
		<form:radiobuttons items="${programs}" path="program"/>   		
   </form>
   
   ---->
   
   <input id="program1" name="program" type="radio" value="c lang" />
   <label for="program1">C 언어</label>
   <input id="program2" name="program" type="radio" value="java lang" />
   <label for="program2">JAVA 언어</label>
   
   
   #<textarea> 태그를 위한 커스텀 태그
   
   <form:textarea> : 여러 줄을 입력받아야 하는 경우
   
   <form:label path="memo"></form:label>
   <form:textarea path="memo" cols="50" rows="5" />
   
   ----->
   <label for="memo">memo</label>
   <textarea id="memo" name="memo" cols="50" rows="5"></textarea>
   
   #에러 관련 커스텀 태그
   
   Errors 객체, BindingResult 객체를 이용해서 에러 정보를 추가한 경우
   <form:errors> 커스텀 태그를 이용해서 에러정보를 출력할 수 있다.
   path 속성을 이용해서 커맨드 객체의 특정 프로퍼티와 관련된 에러 메시지를 출력할 수 있다.
   
   public class MemberValidator implements Validator{
	   	@Override
	   	public void validate(Object target, Errors errors){
	   		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "userId", "required");
	   	}
   }
   
   <form:from commandName="memberValidator">
   	<form:label path="userId">아이디</form:label>
   	<form:input path="userId"/>
   	<form:errors path="userId" />   
   </form:form>
   
   <form:errors>는 지정한 프로퍼티와 관련된 한 개 이상의 에러메시지를 출력한다.
    	각 에러메시지를 생성할 때 두개의 속성을 이용한다. 
     속성 : element, delimeter
        
   <form:errors path="userId" element="div" delimeter=""/>
   
   .element는 각 에러메시지를 출력할 때 사용될 Html 태그로 기본 값은 <span>
   .delimeter는 에러메시지를 구분할 때 사용될 Html 태그로 기본 값 <br />  
  
  
  
  Chapter2-26. 커스텀 태그 활용 I
  
  


  
>>>>>>> refs/remotes/origin/master
 
>>>>>>> refs/remotes/origin/master

 