[Logging]
로그란 프로그램개발이나 운영시에 발생하는 문제점을 추적하거나 운영상태를 모니터링 하기 위한 텍스트이다.
자바에서 로그를 남기는 가장 쉬운방법은 System.out.println();문을 이용해서 사용하는 방법이 있을 수 있다.
System.out.println();문을 사용하는 방법보다 향상된 방법으로 로그를 기록하는 방법은
[로깅프레임워크]를 이용하는 방법이 있다.

#[로깅프레임워크]의 종류
 - commons loggins
   . http://commons.apache.org/proper/commons-logging/
 - log4j
   . http://logging.apache.org./log4/2.x/
 - java util loggin
   . http://docs.oracle.com/javase/6/docs/api/java/util/logging/package-summary.html
 - logback
   . http://logback.qos.ch/
 - slf4j
   . http://www.slf4j.org/download.html 최신 릴리스버전을 다운로드 할 수 있다.

   
[개발 흐름]
1. 테이블 생성
2. VO객체 생성
3. VO와 매핑작업을 하기 위해  XMLMapper작성
4. DAO객체 생성
5. 비지니스객체(Service)생성
6. 컨트롤러 구현

[Exception Process]ㅅ
스프링 MVC를 사용할 때 Controller쪽에서 Exception을 처리하기 위해서 사용하는 방식
①@ExceptionHandler어노테이션을 사용하는 방식
②ControllerAdvice어노테이션을 사용하는 방식
③@ResponseStatus를 이용한 Http상태코드 처리방식

이중에서 가장 많이 사용하는 것은 ControllerAdvice어노테이션 방식이다.

 @ControllerAdvice처리 방식
    공통의 Exception처리 전용 객체를 사용하는 방법
  <사용방법>
  - 클래스의 @ControllerAdvice라는 어노테이션을 선언
  - 각 메소드에 @ExceptionHandler를 이용해서 적절한 타입의 Exception을 처리
  

[Paging처리]
 
 # endPage, startPage 구하기
 
  - endPage
    endPage = (Math.ceil(현재페이지번호 / 페이지 목록에 나타날 페이지 수) * 페이지 목록에 나타날 페이지 수)
  
  - startPage
    startPage = endPage - 페이지 목록에 나타날 페이지 수  + 1
    
 # totalData와 endPage의 재계산
 
  - finalEndPage = Math.ceil(totalData / 한 페이지에 보여줄 글의 수)
    if(endPage > finalEndPage){
    	endPage = finalEndPage
    }
    
 # prev, next 계산
 
  - prev = start == 1 ? false : true;
  - next = (endPage * 한 페이지에 보여줄 글의 수) > totalData ? false : true; 
  

[MyBatis Expression]

 #if
 	<if test="content != null">
 		...
 	</if>
 	
 #choose(when, otherwise)
 	<choose>
 		<when test="content != null">
 			...
 		</when>
 		<when test"product != null and product.code != null">
 			
 		</when>
 		<otherwise>
 			...
 		</otherwise>
 	</choose>
 	
 #trim(where, set)
 	update Member set userName = #{userName}, email = #{email}, tel = #{tel} where id = #{id}
 	//最後にある「、」を削除するケース
	 <update id = "updateMember" parameterType = "com.spring.XXXXVO">	
	 	update Member
	 	<trim prefix="set" suffixOverrides=",">
	 		<if test="username != null">userName =#{userName}, </if>
	 		<if test="email != null">email =#{email}, </if>
	 		<if test="tel != null">tel =#{tel} </if>
	 	</trim>
	 	where id = #{id}
 	</update>
 	
 	select * from Employee where userId = #{userId} and pwd = #{pwd} and email = #{email}
 	//最初にある演算子（AND/OR）を削除するケース
 	<select id="selectInfo" parameterType = "com.spring.XXXXVO" resultType = "memberResultMap">
 		select * from Employee
 		<trim prefix = "where" prefixOverrides="AND | OR">
 			<if test="userName != null">userName =#{userName} </if>
 			<if test="pwd != null">AND pwd =#{pwd} </if>
 			<if test="email != null">and email =#{email} </if>
 		</trim>
 	</select>
 	
 	
 #forEach
 	<foreach
 		item = "item"
 		index = "index"
 		collection = "list"
 		open = "(" seperator = "," close = ")">
 		
 		#{item}
 	</foreach>	 